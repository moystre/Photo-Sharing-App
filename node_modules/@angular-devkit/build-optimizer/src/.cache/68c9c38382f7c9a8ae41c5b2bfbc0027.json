{"remainingRequest":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\util\\log.js","dependencies":[{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\util\\log.js","mtime":1519691374427},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1518892899207},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518892910875}],"contextDependencies":[],"result":["/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/* tslint:disable:no-console */\r\nimport { SDK_VERSION } from '../core/version';\r\nimport { PlatformSupport } from '../platform/platform';\r\nexport var LogLevel = /*@__PURE__*/ (function (LogLevel) {\r\n    LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\r\n    LogLevel[LogLevel[\"ERROR\"] = 1] = \"ERROR\";\r\n    LogLevel[LogLevel[\"SILENT\"] = 2] = \"SILENT\";\r\n    return LogLevel;\r\n})({});\r\nvar logLevel = LogLevel.ERROR;\r\n// Helper methods are needed because variables can't be exported as read/write\r\nexport function getLogLevel() {\r\n    return logLevel;\r\n}\r\nexport function setLogLevel(newLevel) {\r\n    logLevel = newLevel;\r\n}\r\nexport function debug(tag, msg) {\r\n    var obj = [];\r\n    for (var _i = 2; _i < arguments.length; _i++) {\r\n        obj[_i - 2] = arguments[_i];\r\n    }\r\n    if (logLevel <= LogLevel.DEBUG) {\r\n        var time = new Date().toISOString();\r\n        var args = obj.map(argToString);\r\n        console.log.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \" [\" + tag + \"]: \" + msg].concat(args));\r\n    }\r\n}\r\nexport function error(msg) {\r\n    var obj = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        obj[_i - 1] = arguments[_i];\r\n    }\r\n    if (logLevel <= LogLevel.ERROR) {\r\n        var time = new Date().toISOString();\r\n        var args = obj.map(argToString);\r\n        console.error.apply(console, [\"Firestore (\" + SDK_VERSION + \") \" + time + \": \" + msg].concat(args));\r\n    }\r\n}\r\n/**\r\n * Converts an additional log parameter to a string representation.\r\n */\r\nfunction argToString(obj) {\r\n    if (typeof obj === 'string') {\r\n        return obj;\r\n    }\r\n    else {\r\n        var platform = PlatformSupport.getPlatform();\r\n        try {\r\n            return platform.formatJSON(obj);\r\n        }\r\n        catch (e) {\r\n            // Converting to JSON failed, just log the object directly\r\n            return obj;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=log.js.map\r\n",null]}