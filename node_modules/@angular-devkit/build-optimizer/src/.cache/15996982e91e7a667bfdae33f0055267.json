{"remainingRequest":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\ChildChangeAccumulator.js","dependencies":[{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\database\\dist\\cjs\\src\\core\\view\\ChildChangeAccumulator.js","mtime":1519691371644},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1518892899207},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518892910875}],"contextDependencies":[],"result":["\"use strict\";\r\n/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar util_1 = require(\"@firebase/util\");\r\nvar Change_1 = require(\"./Change\");\r\nvar util_2 = require(\"@firebase/util\");\r\n/**\r\n * @constructor\r\n */\r\nvar ChildChangeAccumulator = /*@__PURE__*/ (function () {\r\n    function ChildChangeAccumulator() {\r\n        this.changeMap_ = {};\r\n    }\r\n    /**\r\n     * @param {!Change} change\r\n     */\r\n    ChildChangeAccumulator.prototype.trackChildChange = function (change) {\r\n        var type = change.type;\r\n        var childKey /** @type {!string} */ = change.childName;\r\n        util_2.assert(type == Change_1.Change.CHILD_ADDED ||\r\n            type == Change_1.Change.CHILD_CHANGED ||\r\n            type == Change_1.Change.CHILD_REMOVED, 'Only child changes supported for tracking');\r\n        util_2.assert(childKey !== '.priority', 'Only non-priority child changes can be tracked.');\r\n        var oldChange = util_1.safeGet(this.changeMap_, childKey);\r\n        if (oldChange) {\r\n            var oldType = oldChange.type;\r\n            if (type == Change_1.Change.CHILD_ADDED && oldType == Change_1.Change.CHILD_REMOVED) {\r\n                this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.snapshotNode);\r\n            }\r\n            else if (type == Change_1.Change.CHILD_REMOVED &&\r\n                oldType == Change_1.Change.CHILD_ADDED) {\r\n                delete this.changeMap_[childKey];\r\n            }\r\n            else if (type == Change_1.Change.CHILD_REMOVED &&\r\n                oldType == Change_1.Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change_1.Change.childRemovedChange(childKey, oldChange.oldSnap);\r\n            }\r\n            else if (type == Change_1.Change.CHILD_CHANGED &&\r\n                oldType == Change_1.Change.CHILD_ADDED) {\r\n                this.changeMap_[childKey] = Change_1.Change.childAddedChange(childKey, change.snapshotNode);\r\n            }\r\n            else if (type == Change_1.Change.CHILD_CHANGED &&\r\n                oldType == Change_1.Change.CHILD_CHANGED) {\r\n                this.changeMap_[childKey] = Change_1.Change.childChangedChange(childKey, change.snapshotNode, oldChange.oldSnap);\r\n            }\r\n            else {\r\n                throw util_2.assertionError('Illegal combination of changes: ' +\r\n                    change +\r\n                    ' occurred after ' +\r\n                    oldChange);\r\n            }\r\n        }\r\n        else {\r\n            this.changeMap_[childKey] = change;\r\n        }\r\n    };\r\n    /**\r\n     * @return {!Array.<!Change>}\r\n     */\r\n    ChildChangeAccumulator.prototype.getChanges = function () {\r\n        return util_1.getValues(this.changeMap_);\r\n    };\r\n    return ChildChangeAccumulator;\r\n}());\r\nexports.ChildChangeAccumulator = ChildChangeAccumulator;\r\n",null]}