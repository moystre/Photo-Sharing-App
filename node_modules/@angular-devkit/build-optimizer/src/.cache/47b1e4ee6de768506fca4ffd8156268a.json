{"remainingRequest":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\api\\field_value.js","dependencies":[{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\api\\field_value.js","mtime":1519691373145},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1518892899207},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518892910875}],"contextDependencies":[],"result":["/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { makeConstructorPrivate } from '../util/api';\r\n/**\r\n * An opaque base class for FieldValue sentinel objects in our public API,\r\n * with public static methods for creating said sentinel objects.\r\n */\r\n// tslint:disable-next-line:class-as-namespace  We use this as a base class.\r\nvar FieldValueImpl = /*@__PURE__*/ (function () {\r\n    function FieldValueImpl() {\r\n    }\r\n    FieldValueImpl.delete = function () {\r\n        return DeleteFieldValueImpl.instance;\r\n    };\r\n    FieldValueImpl.serverTimestamp = function () {\r\n        return ServerTimestampFieldValueImpl.instance;\r\n    };\r\n    FieldValueImpl.prototype.isEqual = function (other) {\r\n        return this === other;\r\n    };\r\n    return FieldValueImpl;\r\n}());\r\nexport { FieldValueImpl };\r\nvar DeleteFieldValueImpl = (function (_super) {\r\n    tslib_1.__extends(DeleteFieldValueImpl, _super);\r\n    function DeleteFieldValueImpl() {\r\n        return _super.call(this) || this;\r\n    }\r\n    /** Singleton instance. */\r\n    DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();\r\n    return DeleteFieldValueImpl;\r\n}(FieldValueImpl));\r\nexport { DeleteFieldValueImpl };\r\nvar ServerTimestampFieldValueImpl = (function (_super) {\r\n    tslib_1.__extends(ServerTimestampFieldValueImpl, _super);\r\n    function ServerTimestampFieldValueImpl() {\r\n        return _super.call(this) || this;\r\n    }\r\n    /** Singleton instance. */\r\n    ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();\r\n    return ServerTimestampFieldValueImpl;\r\n}(FieldValueImpl));\r\nexport { ServerTimestampFieldValueImpl };\r\n// Public instance that disallows construction at runtime. This constructor is\r\n// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will\r\n// be called FieldValue publicly. Internally we still use FieldValueImpl which\r\n// has a type-checked private constructor. Note that FieldValueImpl and\r\n// PublicFieldValue can be used interchangeably in instanceof checks.\r\n// For our internal TypeScript code PublicFieldValue doesn't exist as a type,\r\n// and so we need to use FieldValueImpl as type and export it too.\r\n// tslint:disable-next-line:variable-name  We treat this as a class name.\r\nexport var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');\r\n//# sourceMappingURL=field_value.js.map\r\n",null]}