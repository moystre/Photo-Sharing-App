{"remainingRequest":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\core\\timestamp.js","dependencies":[{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\core\\timestamp.js","mtime":1519691373334},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1518892899207},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518892910875}],"contextDependencies":[],"result":["/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { assert } from '../util/assert';\r\nimport { primitiveComparator } from '../util/misc';\r\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\r\nvar isoRegExp = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\r\nvar Timestamp = /*@__PURE__*/ (function () {\r\n    function Timestamp(seconds, nanos) {\r\n        this.seconds = seconds;\r\n        this.nanos = nanos;\r\n        assert(nanos >= 0, 'timestamp nanoseconds out of range: ' + nanos);\r\n        assert(nanos < 1e9, 'timestamp nanoseconds out of range' + nanos);\r\n        // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.\r\n        assert(seconds >= -62135596800, 'timestamp seconds out of range: ' + seconds);\r\n        // This will break in the year 10,000.\r\n        assert(seconds < 253402300800, 'timestamp seconds out of range' + seconds);\r\n    }\r\n    Timestamp.now = function () {\r\n        return Timestamp.fromEpochMilliseconds(Date.now());\r\n    };\r\n    Timestamp.fromDate = function (date) {\r\n        return Timestamp.fromEpochMilliseconds(date.getTime());\r\n    };\r\n    Timestamp.fromEpochMilliseconds = function (milliseconds) {\r\n        var seconds = Math.floor(milliseconds / 1000);\r\n        var nanos = (milliseconds - seconds * 1000) * 1e6;\r\n        return new Timestamp(seconds, nanos);\r\n    };\r\n    Timestamp.fromISOString = function (utc) {\r\n        // The date string can have higher precision (nanos) than the Date class\r\n        // (millis), so we do some custom parsing here.\r\n        // Parse the nanos right out of the string.\r\n        var nanos = 0;\r\n        var fraction = isoRegExp.exec(utc);\r\n        assert(!!fraction, 'invalid timestamp: ' + utc);\r\n        if (fraction[1]) {\r\n            // Pad the fraction out to 9 digits (nanos).\r\n            var nanoStr = fraction[1];\r\n            nanoStr = (nanoStr + '000000000').substr(0, 9);\r\n            nanos = Number(nanoStr);\r\n        }\r\n        // Parse the date to get the seconds.\r\n        var date = new Date(utc);\r\n        var seconds = Math.floor(date.getTime() / 1000);\r\n        return new Timestamp(seconds, nanos);\r\n    };\r\n    Timestamp.prototype.toDate = function () {\r\n        return new Date(this.toEpochMilliseconds());\r\n    };\r\n    Timestamp.prototype.toEpochMilliseconds = function () {\r\n        return this.seconds * 1000 + this.nanos / 1e6;\r\n    };\r\n    Timestamp.prototype.compareTo = function (other) {\r\n        if (this.seconds === other.seconds) {\r\n            return primitiveComparator(this.nanos, other.nanos);\r\n        }\r\n        return primitiveComparator(this.seconds, other.seconds);\r\n    };\r\n    Timestamp.prototype.isEqual = function (other) {\r\n        return other.seconds === this.seconds && other.nanos === this.nanos;\r\n    };\r\n    Timestamp.prototype.toString = function () {\r\n        return 'Timestamp(seconds=' + this.seconds + ', nanos=' + this.nanos + ')';\r\n    };\r\n    return Timestamp;\r\n}());\r\nexport { Timestamp };\r\n//# sourceMappingURL=timestamp.js.map\r\n",null]}