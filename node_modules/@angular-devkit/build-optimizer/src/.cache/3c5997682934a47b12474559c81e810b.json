{"remainingRequest":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\local\\query_data.js","dependencies":[{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\local\\query_data.js","mtime":1519691373734},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1518892899207},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518892910875}],"contextDependencies":[],"result":["/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { SnapshotVersion } from '../core/snapshot_version';\r\nimport { emptyByteString } from '../platform/platform';\r\n/** An enumeration of the different purposes we have for queries. */\r\nexport var QueryPurpose;\r\n(function (QueryPurpose) {\r\n    /** A regular, normal query. */\r\n    QueryPurpose[QueryPurpose[\"Listen\"] = 0] = \"Listen\";\r\n    /**\r\n     * The query was used to refill a query after an existence filter mismatch.\r\n     */\r\n    QueryPurpose[QueryPurpose[\"ExistenceFilterMismatch\"] = 1] = \"ExistenceFilterMismatch\";\r\n    /** The query was used to resolve a limbo document. */\r\n    QueryPurpose[QueryPurpose[\"LimboResolution\"] = 2] = \"LimboResolution\";\r\n})(QueryPurpose || (QueryPurpose = {}));\r\n/**\r\n * An immutable set of metadata that the local store tracks for each query.\r\n */\r\nvar QueryData = /*@__PURE__*/ (function () {\r\n    function QueryData(\r\n        /** The query being listened to. */\r\n        query, \r\n        /**\r\n         * The target ID to which the query corresponds; Assigned by the\r\n         * LocalStore for user listens and by the SyncEngine for limbo watches.\r\n         */\r\n        targetId, \r\n        /** The purpose of the query. */\r\n        purpose, \r\n        /** The latest snapshot version seen for this target. */\r\n        snapshotVersion, \r\n        /**\r\n         * An opaque, server-assigned token that allows watching a query to be\r\n         * resumed after disconnecting without retransmitting all the data that\r\n         * matches the query. The resume token essentially identifies a point in\r\n         * time from which the server should resume sending results.\r\n         */\r\n        resumeToken) {\r\n        if (snapshotVersion === void 0) {\r\n            snapshotVersion = SnapshotVersion.MIN;\r\n        }\r\n        if (resumeToken === void 0) {\r\n            resumeToken = emptyByteString();\r\n        }\r\n        this.query = query;\r\n        this.targetId = targetId;\r\n        this.purpose = purpose;\r\n        this.snapshotVersion = snapshotVersion;\r\n        this.resumeToken = resumeToken;\r\n    }\r\n    /**\r\n     * Creates a new query data instance with an updated snapshot version and\r\n     * resume token.\r\n     */\r\n    QueryData.prototype.update = function (updated) {\r\n        return new QueryData(this.query, this.targetId, this.purpose, updated.snapshotVersion, updated.resumeToken);\r\n    };\r\n    QueryData.prototype.isEqual = function (other) {\r\n        return (this.targetId === other.targetId &&\r\n            this.purpose === other.purpose &&\r\n            this.snapshotVersion.isEqual(other.snapshotVersion) &&\r\n            this.resumeToken === other.resumeToken &&\r\n            this.query.isEqual(other.query));\r\n    };\r\n    return QueryData;\r\n}());\r\nexport { QueryData };\r\n//# sourceMappingURL=query_data.js.map\r\n",null]}