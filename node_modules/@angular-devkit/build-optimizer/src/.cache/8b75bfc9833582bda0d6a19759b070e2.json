{"remainingRequest":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\local\\indexeddb_query_cache.js","dependencies":[{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\local\\indexeddb_query_cache.js","mtime":1519691373535},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1518892899207},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518892910875}],"contextDependencies":[],"result":["/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { SnapshotVersion } from '../core/snapshot_version';\r\nimport { Timestamp } from '../core/timestamp';\r\nimport { documentKeySet } from '../model/collections';\r\nimport { DocumentKey } from '../model/document_key';\r\nimport { assert, fail } from '../util/assert';\r\nimport { immediateSuccessor } from '../util/misc';\r\nimport * as EncodedResourcePath from './encoded_resource_path';\r\nimport { DbTarget, DbTargetDocument, DbTargetGlobal } from './indexeddb_schema';\r\nimport { PersistencePromise } from './persistence_promise';\r\nimport { SimpleDbTransaction } from './simple_db';\r\nvar IndexedDbQueryCache = /*@__PURE__*/ (function () {\r\n    function IndexedDbQueryCache(serializer) {\r\n        this.serializer = serializer;\r\n        /**\r\n         * The last received snapshot version. We store this seperately from the\r\n         * metadata to avoid the extra conversion to/from DbTimestamp.\r\n         */\r\n        this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;\r\n        /**\r\n         * A cached copy of the metadata for the query cache.\r\n         */\r\n        this.metadata = new DbTargetGlobal(\r\n        /*highestTargetId=*/ 0, \r\n        /*lastListenSequenceNumber=*/ 0, SnapshotVersion.MIN.toTimestamp());\r\n        /** The garbage collector to notify about potential garbage keys. */\r\n        this.garbageCollector = null;\r\n    }\r\n    IndexedDbQueryCache.prototype.start = function (transaction) {\r\n        var _this = this;\r\n        return globalTargetStore(transaction)\r\n            .get(DbTargetGlobal.key)\r\n            .next(function (metadata) {\r\n            if (metadata !== null) {\r\n                _this.metadata = metadata;\r\n                var lastSavedVersion = metadata.lastRemoteSnapshotVersion;\r\n                _this.lastRemoteSnapshotVersion = SnapshotVersion.fromTimestamp(new Timestamp(lastSavedVersion.seconds, lastSavedVersion.nanos));\r\n            }\r\n            return PersistencePromise.resolve();\r\n        });\r\n    };\r\n    IndexedDbQueryCache.prototype.getHighestTargetId = function () {\r\n        return this.metadata.highestTargetId;\r\n    };\r\n    IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function () {\r\n        return this.lastRemoteSnapshotVersion;\r\n    };\r\n    IndexedDbQueryCache.prototype.setLastRemoteSnapshotVersion = function (transaction, snapshotVersion) {\r\n        this.lastRemoteSnapshotVersion = snapshotVersion;\r\n        this.metadata.lastRemoteSnapshotVersion = snapshotVersion.toTimestamp();\r\n        return globalTargetStore(transaction).put(DbTargetGlobal.key, this.metadata);\r\n    };\r\n    IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {\r\n        var _this = this;\r\n        var targetId = queryData.targetId;\r\n        var addedQueryPromise = targetsStore(transaction).put(this.serializer.toDbTarget(queryData));\r\n        if (targetId > this.metadata.highestTargetId) {\r\n            this.metadata.highestTargetId = targetId;\r\n            return addedQueryPromise.next(function () {\r\n                return globalTargetStore(transaction).put(DbTargetGlobal.key, _this.metadata);\r\n            });\r\n        }\r\n        else {\r\n            return addedQueryPromise;\r\n        }\r\n    };\r\n    IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {\r\n        return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {\r\n            targetsStore(transaction).delete(queryData.targetId);\r\n        });\r\n    };\r\n    IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {\r\n        var _this = this;\r\n        // Iterating by the canonicalId may yield more than one result because\r\n        // canonicalId values are not required to be unique per target. This query\r\n        // depends on the queryTargets index to be efficent.\r\n        var canonicalId = query.canonicalId();\r\n        var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\r\n        var result = null;\r\n        return targetsStore(transaction)\r\n            .iterate({ range: range, index: DbTarget.queryTargetsIndexName }, function (key, value, control) {\r\n            var found = _this.serializer.fromDbTarget(value);\r\n            // After finding a potential match, check that the query is\r\n            // actually equal to the requested query.\r\n            if (query.isEqual(found.query)) {\r\n                result = found;\r\n                control.done();\r\n            }\r\n        })\r\n            .next(function () { return result; });\r\n    };\r\n    IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {\r\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\r\n        // Indexeddb.\r\n        var promises = [];\r\n        var store = documentTargetStore(txn);\r\n        keys.forEach(function (key) {\r\n            var path = EncodedResourcePath.encode(key.path);\r\n            promises.push(store.put(new DbTargetDocument(targetId, path)));\r\n        });\r\n        return PersistencePromise.waitFor(promises);\r\n    };\r\n    IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {\r\n        var _this = this;\r\n        // PORTING NOTE: The reverse index (documentsTargets) is maintained by\r\n        // IndexedDb.\r\n        var promises = [];\r\n        var store = documentTargetStore(txn);\r\n        keys.forEach(function (key) {\r\n            var path = EncodedResourcePath.encode(key.path);\r\n            promises.push(store.delete([targetId, path]));\r\n            if (_this.garbageCollector !== null) {\r\n                _this.garbageCollector.addPotentialGarbageKey(key);\r\n            }\r\n        });\r\n        return PersistencePromise.waitFor(promises);\r\n    };\r\n    IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {\r\n        var store = documentTargetStore(txn);\r\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true);\r\n        return this.notifyGCForRemovedKeys(txn, range).next(function () {\r\n            return store.delete(range);\r\n        });\r\n    };\r\n    IndexedDbQueryCache.prototype.notifyGCForRemovedKeys = function (txn, range) {\r\n        var _this = this;\r\n        var store = documentTargetStore(txn);\r\n        if (this.garbageCollector !== null && this.garbageCollector.isEager) {\r\n            // In order to generate garbage events properly, we need to read these\r\n            // keys before deleting.\r\n            return store.iterate({ range: range, keysOnly: true }, function (key, _, control) {\r\n                var path = EncodedResourcePath.decode(key[1]);\r\n                var docKey = new DocumentKey(path);\r\n                // Paranoid assertion in case the the collector is set to null\r\n                // during the iteration.\r\n                assert(_this.garbageCollector !== null, 'GarbageCollector for query cache set to null during key removal.');\r\n                _this.garbageCollector.addPotentialGarbageKey(docKey);\r\n            });\r\n        }\r\n        else {\r\n            return PersistencePromise.resolve();\r\n        }\r\n    };\r\n    IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {\r\n        var range = IDBKeyRange.bound([targetId], [targetId + 1], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true);\r\n        var store = documentTargetStore(txn);\r\n        var result = documentKeySet();\r\n        return store\r\n            .iterate({ range: range, keysOnly: true }, function (key, _, control) {\r\n            var path = EncodedResourcePath.decode(key[1]);\r\n            var docKey = new DocumentKey(path);\r\n            result = result.add(docKey);\r\n        })\r\n            .next(function () { return result; });\r\n    };\r\n    IndexedDbQueryCache.prototype.setGarbageCollector = function (gc) {\r\n        this.garbageCollector = gc;\r\n    };\r\n    IndexedDbQueryCache.prototype.containsKey = function (txn, key) {\r\n        assert(txn !== null, 'Persistence Transaction cannot be null for query cache containsKey');\r\n        var path = EncodedResourcePath.encode(key.path);\r\n        var range = IDBKeyRange.bound([path], [immediateSuccessor(path)], \r\n        /*lowerOpen=*/ false, \r\n        /*upperOpen=*/ true);\r\n        var count = 0;\r\n        return documentTargetStore(txn)\r\n            .iterate({\r\n            index: DbTargetDocument.documentTargetsIndex,\r\n            keysOnly: true,\r\n            range: range\r\n        }, function (key, _, control) {\r\n            count++;\r\n            control.done();\r\n        })\r\n            .next(function () { return count > 0; });\r\n    };\r\n    return IndexedDbQueryCache;\r\n}());\r\nexport { IndexedDbQueryCache };\r\n/**\r\n * Helper to get a typed SimpleDbStore for the queries object store.\r\n */\r\nfunction targetsStore(txn) {\r\n    return getStore(txn, DbTarget.store);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the target globals object store.\r\n */\r\nfunction globalTargetStore(txn) {\r\n    return getStore(txn, DbTargetGlobal.store);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore for the document target object store.\r\n */\r\nfunction documentTargetStore(txn) {\r\n    return getStore(txn, DbTargetDocument.store);\r\n}\r\n/**\r\n * Helper to get a typed SimpleDbStore from a transaction.\r\n */\r\nfunction getStore(txn, store) {\r\n    if (txn instanceof SimpleDbTransaction) {\r\n        return txn.store(store);\r\n    }\r\n    else {\r\n        return fail('Invalid transaction object provided!');\r\n    }\r\n}\r\n//# sourceMappingURL=indexeddb_query_cache.js.map\r\n",null]}