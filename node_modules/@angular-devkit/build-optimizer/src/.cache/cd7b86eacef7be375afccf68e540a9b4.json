{"remainingRequest":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\angularfire2\\database\\list\\audit-trail.js","dependencies":[{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\angularfire2\\database\\list\\audit-trail.js","mtime":1519691366510},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1518892899207},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518892910875}],"contextDependencies":[],"result":["import { stateChanges } from './state-changes';\nimport { fromRef } from '../observable/fromRef';\nimport 'rxjs/add/operator/skipWhile';\nimport 'rxjs/add/operator/withLatestFrom';\nimport 'rxjs/add/operator/map';\nexport function createAuditTrail(query) {\n    return function (events) { return auditTrail(query, events); };\n}\nexport function auditTrail(query, events) {\n    var auditTrail$ = stateChanges(query, events)\n        .scan(function (current, action) { return current.concat([action]); }, []);\n    return waitForLoaded(query, auditTrail$);\n}\nfunction loadedData(query) {\n    return fromRef(query, 'value')\n        .map(function (data) {\n        var lastKeyToLoad;\n        data.payload.forEach(function (child) {\n            lastKeyToLoad = child.key;\n            return false;\n        });\n        return { data: data, lastKeyToLoad: lastKeyToLoad };\n    });\n}\nfunction waitForLoaded(query, action$) {\n    var loaded$ = loadedData(query);\n    return loaded$\n        .withLatestFrom(action$)\n        .map(function (_a) {\n        var loaded = _a[0], actions = _a[1];\n        var lastKeyToLoad = loaded.lastKeyToLoad;\n        var loadedKeys = actions.map(function (snap) { return snap.key; });\n        return { actions: actions, lastKeyToLoad: lastKeyToLoad, loadedKeys: loadedKeys };\n    })\n        .skipWhile(function (meta) { return meta.loadedKeys.indexOf(meta.lastKeyToLoad) === -1; })\n        .map(function (meta) { return meta.actions; });\n}\n//# sourceMappingURL=audit-trail.js.map",null]}