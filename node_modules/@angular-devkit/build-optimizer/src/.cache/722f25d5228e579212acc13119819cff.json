{"remainingRequest":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\remote\\datastore.js","dependencies":[{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@firebase\\firestore\\dist\\esm\\src\\remote\\datastore.js","mtime":1519691374259},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1518892899207},{"path":"D:\\Documents\\VS Code Projects\\photo-sharing-app\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518892910875}],"contextDependencies":[],"result":["/**\r\n * Copyright 2017 Google Inc.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nimport { maybeDocumentMap } from '../model/collections';\r\nimport { assert } from '../util/assert';\r\nimport { PersistentListenStream, PersistentWriteStream } from './persistent_stream';\r\n/**\r\n * Datastore is a wrapper around the external Google Cloud Datastore grpc API,\r\n * which provides an interface that is more convenient for the rest of the\r\n * client SDK architecture to consume.\r\n */\r\nvar Datastore = /*@__PURE__*/ (function () {\r\n    function Datastore(queue, connection, credentials, serializer) {\r\n        this.queue = queue;\r\n        this.connection = connection;\r\n        this.credentials = credentials;\r\n        this.serializer = serializer;\r\n    }\r\n    Datastore.prototype.newPersistentWriteStream = function () {\r\n        return new PersistentWriteStream(this.queue, this.connection, this.credentials, this.serializer);\r\n    };\r\n    Datastore.prototype.newPersistentWatchStream = function () {\r\n        return new PersistentListenStream(this.queue, this.connection, this.credentials, this.serializer);\r\n    };\r\n    Datastore.prototype.commit = function (mutations) {\r\n        var _this = this;\r\n        var params = {\r\n            database: this.serializer.encodedDatabaseId,\r\n            writes: mutations.map(function (m) { return _this.serializer.toMutation(m); })\r\n        };\r\n        return this.invokeRPC('Commit', params).then(function (response) {\r\n            return _this.serializer.fromWriteResults(response.writeResults);\r\n        });\r\n    };\r\n    Datastore.prototype.lookup = function (keys) {\r\n        var _this = this;\r\n        var params = {\r\n            database: this.serializer.encodedDatabaseId,\r\n            documents: keys.map(function (k) { return _this.serializer.toName(k); })\r\n        };\r\n        return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {\r\n            var docs = maybeDocumentMap();\r\n            response.forEach(function (proto) {\r\n                var doc = _this.serializer.fromMaybeDocument(proto);\r\n                docs = docs.insert(doc.key, doc);\r\n            });\r\n            var result = [];\r\n            keys.forEach(function (key) {\r\n                var doc = docs.get(key);\r\n                assert(!!doc, 'Missing entity in write response for ' + key);\r\n                result.push(doc);\r\n            });\r\n            return result;\r\n        });\r\n    };\r\n    /** Gets an auth token and invokes the provided RPC. */\r\n    Datastore.prototype.invokeRPC = function (rpcName, request) {\r\n        var _this = this;\r\n        // TODO(mikelehen): Retry (with backoff) on token failures?\r\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\r\n            return _this.connection.invokeRPC(rpcName, request, token);\r\n        });\r\n    };\r\n    /** Gets an auth token and invokes the provided RPC with streamed results. */\r\n    Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {\r\n        var _this = this;\r\n        // TODO(mikelehen): Retry (with backoff) on token failures?\r\n        return this.credentials.getToken(/*forceRefresh=*/ false).then(function (token) {\r\n            return _this.connection.invokeStreamingRPC(rpcName, request, token);\r\n        });\r\n    };\r\n    return Datastore;\r\n}());\r\nexport { Datastore };\r\n//# sourceMappingURL=datastore.js.map\r\n",null]}